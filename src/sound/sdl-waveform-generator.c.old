/*
  generate sound with gnuplot:
  set table
  set output "sound5.gplot"
  plot [0:512] (100*sin(x*2*pi*10/(512))+127)  

 */

#define SNDFMT Uint8

#include "SDL.h" 
#include "SDL_audio.h" 
#include "SDL_gfxPrimitives.h"
#include <stdlib.h> 
#include <math.h> 

void Callback (void *, SNDFMT *, int); 

double pi    = 3.1415926535897932384626433832795029L;
//double pi = 3.1415; 
int music[10] = { 1, 3, 5, 6 ,8, 1, 6, 5, 3, 1}; 
float sqrt12 = 1.059463094;

int mem0size=500,mem1size = 50000;


double frequency(int note){
  return 440.0* pow(sqrt12,  note); 
}
  


SDL_Surface *screen;
int xres = 640;
int yres = 480; 
SDL_AudioSpec spec; 
Uint32 sound_len; 
SNDFMT *sound_buffer; 
Uint32 sound_pos = 0; 
int counter; 

int adsr=1; // no attack-delay sustain release 
//int attack, delay, sustain, release;

//sample rate
double SR = 44100; 
double amplitude=100.0;
int waveform=0;
int copyintomem=1;
SNDFMT* mem[2];

int yline[2*SR];
int gate =1;
double Hz= 400.0;//*hzptr;	

/*
  adsr
attack delay sustain release
*/
struct asdr {
  float attack;
  float decay;
  float sustainlevel;
  float sustainmax  ;
  float release ;
};
// asdrenvelope instrument index
int instrument = 2;
struct asdr asdrenvelope[10] = {
  // piano
  { //attack 
    52.0 / 1000.0,
    // decay
    550.0 / 1000,
    // sustainlevel
    0.0,
    // sustainmax
    200.0/ 1000.0,
    // release
    172.0/ 1000
  },
  // trumpet
  { //attack 
    15.0 / 1000.0,
    // decay
    50.0 / 1000,
    // sustainlevel
    0.8,
    // sustainmax
    1200.0/ 1000.0,
    // release
    0.0/ 1000
  },
  { //attack 
    10.0 / 1000.0,
    // decay
    35.0 / 1000,
    // sustainlevel
    0.5,
    // sustainmax
    500.0/ 1000.0,
    // release
    372.0/ 1000
  }
};

//Do all the init stuff 
void init_sdl (void) 
{ 
  if (SDL_Init (SDL_INIT_VIDEO|SDL_INIT_AUDIO) < 0) 
    exit (-1); 
  atexit (SDL_Quit); 
  screen = SDL_SetVideoMode (640, 480, 16, SDL_HWSURFACE); 
  if (screen == NULL) 
    exit (-1); 
  
  sound_len= 512; 
  spec.freq = 44100; 
  spec.format = AUDIO_U8;//S16SYS; 
  spec.channels = 1; 
  spec.silence = 127; 
  spec.samples = 512; 
  spec.padding = 0; 
  spec.size = 0;     
  
  double userdata = 300.0; 
  spec.userdata = &userdata;
  
  spec.callback = Callback; 
  if (SDL_OpenAudio (&spec, NULL) < 0) 
    { 
      printf ("Kann audio nicht Ã¶ffnen: %s\n", SDL_GetError ()); 
      exit (-1); 
    } 
} 

void copy_buffer(SNDFMT *sound_buffer){
  static int count=0;
  int i;
  if(count<2){
	for( i=0; i<512;i++){
	  mem[count][i] = (SNDFMT) sound_buffer[i];
	}
	count++;
  }
}

void write_buffer(SNDFMT *sound_buffer){
  static int count=0;
  int i;
  if(count<1){
	for( i=0; i<512;i++){
	  sound_buffer[i] = (SNDFMT)mem[0][i] ;
	}
	count++;
  }
}
float envelope2(int counter){
  return 0.0;
}
float envelope(int counter){
  float ma,ba,md,bd,mr,br;
  static float envelope=0;
  float attack = asdrenvelope[instrument].attack ;//2.0 / 1000;
  float decay = asdrenvelope[instrument].decay; //750.0 / 1000;
  float sustainlevel = asdrenvelope[instrument].sustainlevel; //0.0;
  float sustainmax = asdrenvelope[instrument].sustainmax; //200.0/ 1000 ;
  float release = asdrenvelope[instrument].release; //72.0/ 1000;

  float xa = attack;
  float xd = attack + decay;
  static float xg= 0.0;//attack + decay + sustainmax;
  float xr = xg + release;
  
  static int adsrcounter=0;
  float t = adsrcounter/SR ;

  /* if(!gate){ */
  /*   if(xg){ */
  /*     xg = adsrcounter; */
  /*   } */
  /* } */

  //  printf("Envelope: adsrcounter = %i   t = %f\n", adsrcounter, t);
  if(gate){
    xg = t;
    if(t < attack) { 
      //attack
      ma = 1 / xa;
      ba = 0;
      envelope = ma * t + ba;
      //    printf("attack %i: ma = %f    ba = %f env: %f\n", adsrcounter, ma, ba, envelope);
    }else{ 
      if(t < xd){
	// decay
	md = ((1.0 - sustainlevel) / (xa-xd));//-decay) ;
	bd = (sustainlevel*xa - xd) / (xa - xd) ; // bd = 1.0 - (( 1.0 - sustainlevel) / (xa-xd));
	envelope = md * t + bd;
	//	printf("decay %i: md = %f    bd = %f env: %f\n", adsrcounter, md, bd, envelope);
	//	nullsein = - (adsrcounter-maxa)/(maxd - maxa);
      } else{
	// sustain
	envelope = envelope; // sic, we just maintain
	//	    printf("sustain %i: envelope %f\n", adsrcounter, envelope);
      }
    }
  } else {
    // release linear
    mr = sustainlevel / -release ; // (xg - xr);
    br = - (sustainlevel * xr) / (xg - xr);
    envelope = mr * t + br; 
    // printf("release %i: mr = %f    br = %f env: %f\n", adsrcounter, mr, br, envelope);
  }

  adsrcounter++;
  if(t > attack+decay+sustainmax + release){
    adsrcounter = 0;
    xg=0.0;
  }
  if(envelope < 1) return envelope;
  return 55.0;
  //  return envelope;
}

float sinwave(double frequency, int counter){
  return sin(frequency*(double) counter);
}

float squarewave(double frequency, int counter){
  if(sinwave(frequency,counter)>=0){
    return 220.0 * envelope(counter);
  } else {
    return 0.0;
  }
}
  
float lin(float x){}
  
float sawtoothwave(double F, int counter){
  double frequency = F*SR;
  float n = (frequency-1);
  //printf (" nenner = %f \t", n);
  float z = (counter % (int) floor(frequency));
  //printf (" zahler = %f \n", z);
  //return 0.3;
  return (float) (((counter % (int) floor(frequency)) / (frequency-1))  - 0.5); //(SNDFMT) (1 * (z % (int)Hz));
}

float sinsquarewave(double frequency, int counter){
  double w = counter; //2*pi;
  double x = frequency;
  return 4/pi*sin(w*x) \
    + 4/(3*pi)*sin(3*w*x)			\
    + 4/(5*pi)*sin(5*w*x)			\
    + 4/(7*pi)*sin(7*w*x)			\
    + 4/(9*pi)*sin(9*w*x)			\
    + 4/(11*pi)*sin(11*w*x)			\
    + 4/(13*pi)*sin(13*w*x)			\
    + 4/(15*pi)*sin(15*w*x)			\
    + 4/(17*pi)*sin(17*w*x)			\
    + 4/(19*pi)*sin(19*w*x)			\
    + 4/(21*pi)*sin(21*w*x)			\
    + 4/(23*pi)*sin(23*w*x)			\
    + 4/(25*pi)*sin(25*w*x)			\
    + 4/(27*pi)*sin(27*w*x)			\
    + 4/(29*pi)*sin(29*w*x);
}

float dutypcmwave(double frequency, int counter){
  double duty = 0.2; // 20% duty
  if(sinwave(frequency, counter)> 0.2){
    return 0.8;
  }
  else{
    return 0.2;
  }
}

float trianglewave(double frequency, int counter){
  double duty = 0.2; // 20% duty
  static dutycounter = 0;
  if(sinwave(frequency, counter)>=0.5){
    if(dutycounter < duty * SR * frequency){
      dutycounter ++; 
      return 1.0;
    }
    else{
      dutycounter = 0;
      return 0.0;
    }
  } else
    return 0.0;
}
    
float noisewave(double frequency, int counter){
  
}


struct fir {
  double b0;
  double b1;
  double b2;
  double b3;
  double b4;
  double b5;
};

struct fir firfilterstruct;

// finite impulse response (FIR) filter
double firfilter(int index, double buf[]){
  return     firfilterstruct.b0 * buf[index];
  /* 
    firfilterstruct.b0 *  buf[index] +	\
    firfilterstruct.b1 * buf[index+1] + \
    firfilterstruct.b2 * buf[index+2] + \
    firfilterstruct.b3 * buf[index+3] + \
    firfilterstruct.b4 * buf[index+4] + \
    firfilterstruct.b5 * buf[index+5] ;
    */
}

//Creates the sine wave. To supress ripple, the wave runs continuously by using an incemental counter 
void Callback (void *userdata, SNDFMT *stream, int len) 
{ 
  float envelopeval;
  SNDFMT *waveptr; 
  //        double L = 512; 
  double F=2*pi*Hz/SR; 
 envelopeval = envelope(counter);
  int z =0;
  for (z = 0; z< len ; z++){ 
    counter++; 
    envelopeval = envelope(counter);
    switch(waveform){
    case 0: // sinus wave
      sound_buffer[z] = (SNDFMT) (amplitude*envelopeval*sin(F*(double)counter)+127.0);
      break;
    case 1: // square wave
      sound_buffer[z] = (SNDFMT) amplitude * squarewave(F,counter);
      break;
    case 2: // sawtooth
      sound_buffer[z] = (SNDFMT) ( amplitude * sawtoothwave(F,counter)) + 127.0;
      break;
    case 3: // sinsquarewave
      sound_buffer[z] = (SNDFMT) amplitude * sinsquarewave(F, counter);
      break;
    case 4: // duty pcm
      sound_buffer[z] = (SNDFMT) amplitude * dutypcmwave(Hz, counter);
      break;
    case 5: // triangle
      sound_buffer[z] = (SNDFMT) amplitude * trianglewave(Hz, counter);
      break;
    case 6: // load music 
      sound_buffer[z] = mem[1][counter%mem1size];
    }
    
    if(copyintomem==1){
      //		  mem[0][counter%50000] = (SNDFMT) (100 * envelope(counter));
      mem[0][counter%50000] = sound_buffer[z];
      mem[0][counter%50000] = sound_buffer[z];
      //copyintomem =0;
    }

    int i,y;
    
    //    for(i=0;i<1; i++){
      for(y=0;y<180; y++){
	//linemem[counter % xres] = y; 
	DrawPixel(screen, (counter % xres)+ 1, y, 100,10,10);
      }
      //    }
    //boxRGBA(screen, (counter % xres), 0 , (counter % xres)+10, 250, 100,10,10,12);
    DrawPixel(screen, counter % xres, sound_buffer[z], 100, 100, 100);
  } 
  
  //Do the sound loop... 
  if (sound_pos + len > sound_len){	
    sound_pos=0; 
  } 
  
  waveptr = sound_buffer + sound_pos; 
  SDL_MixAudio(stream, waveptr, len, SDL_MIX_MAXVOLUME); 
  
  copy_buffer(sound_buffer);
  //stream = waveptr; //Replacing the mixer gives nothing but silence...!?! 
  
  sound_pos += len; 
} 


void play (void) { 
  SDL_PauseAudio (0); 
} 

void load(char* path){
  FILE *finp;
  finp=fopen(path, "r");
  int i;
  char c;
  int x,y;
  printf("start scanf\n");
  for(i=0;i<512; i++){
    fscanf(finp, "%d %i %c\n", &x, &y, &c);
    //		  scanf(fp2, "%d %i %c\n", &x, &y, &c);
    mem[0][i] = (SNDFMT) y;
  }
  fclose(finp);
}  

void save(char* path){
	FILE *foutp;
	foutp=fopen(path, "w");
	int i;
	for(i=0;i<45000;i++){
	  // fprintf(foutp, " %i %f i\n",i, envelope(i));
	  fprintf(foutp, " %i %i i\n",i, mem[1][i]);
	}
	fclose(foutp);
}

void handleKey(SDL_KeyboardEvent key) {
  switch(key.keysym.sym) {
  case SDLK_s: // sinus
    waveform=0;
    break;
  case SDLK_q: // square
    waveform=1;
    break;
  case SDLK_w: // sawtooth wave
    waveform = 2;
    break;
  case SDLK_x: // sinsquare wave
    waveform = 3;
    break;
  case SDLK_d: // duty pcm
    waveform = 4;
    break;
  case SDLK_t: // triangle wave
    waveform = 5;
    break;
  case SDLK_c: // copy
    if( copyintomem ==0){
      copyintomem = 1;
    } 
    else
      {
	copyintomem =0 ;
      }
    break;
  case SDLK_a: // adsr
    if(key.type == SDL_PRESSED) {
      adsr = 1;
      printf("KEy a pressed\n");
    } //printf("KEy 1 pressed %i %c %i\n",key.type,key.keysym.sym,SDL_PRESSED);
    if(key.type == SDL_RELEASED){
      adsr = 0;
      printf("KEy a released\n");
    }
    break;
  case SDLK_1: // note 1 anspielen
  case SDLK_2: // note 2 anspielen
  case SDLK_3: // note 3 anspielen
  case SDLK_4: // note 4 anspielen
    if(key.state == SDL_PRESSED) {
      Hz = frequency(music[key.keysym.sym-'0']);
      gate = 1; // start adsr attack phase
      printf("KEy 1  pressed %c\n",key.keysym.sym);
    } 
    if(key.state == SDL_RELEASED){
      gate = 0; // enter release phase
      printf("KEy  1 released\n");
    }
    break;

  case SDLK_l:
    if(key.state == SDL_PRESSED) {

      
    }
    break;
  default:
    /* do nothing */
    break;
  }
}


int main(int argc, char* argv[]) 
{

  

	sound_buffer = malloc(sizeof(SNDFMT)*512);
	mem[0] = malloc(sizeof(SNDFMT)*mem0size);
	mem[1] = malloc(sizeof(SNDFMT)*mem1size);
  
        init_sdl (); 


	Hz=440;

	//	main_synthesiser(1, NULL);
	printf("start play\n");
        play ();
	int i=0;
	SDL_Event event;
	int done=0;
	int hzinc=0,amplitudeinc;


	while(!done) {
	  while(SDL_PollEvent(&event)) {
	    
 switch(event.type) {
	    case SDL_KEYDOWN:
	      switch(event.key.keysym.sym){
	      case SDLK_LEFT:
		amplitudeinc = -1;
		break;
	      case SDLK_RIGHT:
		amplitudeinc = +1;;
		break;
	      case SDLK_UP:
		hzinc = 1;
		printf("up active\n");
		break;
	      case SDLK_DOWN:
		hzinc = -1;
		printf("down active\n");
		break;
	      default:
		handleKey(event.key);
		break;
	      }
	      break;
	    case SDL_KEYUP:
	      switch(event.key.keysym.sym){
	      case SDLK_LEFT:
		amplitudeinc = 0;
		break;
	      case SDLK_RIGHT:
		amplitudeinc = 0;
		break;
	      case SDLK_UP:
		hzinc = 0;
		printf("up in-active\n");
		break;
	      case SDLK_DOWN:
		hzinc = 0;
		printf("down in-active\n");
		break;
	      default:
		handleKey(event.key);
		break;
	      }
	      break;
	    case SDL_QUIT:
	      done = 1;
	      printf("SDL_QUIT\n");
	      break;
	    case SDL_MOUSEBUTTONUP:
	      switch(event.button.button){
		case SDL_BUTTON_WHEELUP:
		  Hz += 1;
		  break;
		case SDL_BUTTON_WHEELDOWN:
		  Hz -= 1;
		  break;
		}
	      break;
	    default:
	      /* do nothing */
	      break;
	    }
	  }


	  //Hz= 2*Hz;
	  Hz = Hz + hzinc;
	  amplitude = amplitude + amplitudeinc;
	  //	  printf("Hz: %f\n",Hz);
	  //% Hz = frequency(music[i++%10]);
	  int y;
	  SDL_Flip(screen);
	  SDL_Delay (550);
	}
	save("sndout6.snd");
	SDL_Delay (500);  


        return 0; 

	
} 
