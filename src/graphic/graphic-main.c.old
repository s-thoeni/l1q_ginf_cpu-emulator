/*

  graphic-main.c
  bho1 - init 29.12.2011 

  Compile with  `sdl-config --cflags --libs`
  

  
*/
#include <string.h>
#include <stdio.h>

#include "cpu.h"
#include "flags.h"
#include "alu.h"
#include "decode.h"
#include "memory.h"
#include "cpu-util.h"
#include "register.h"
#include "printers.h"

#include <stdlib.h>

//#include "display.h"

#include "sdl-driver.h"

#include "bitmap.h"
#include "chardev.h"

#include "SDL.h"

extern SDL_Surface *le_screen;

extern unsigned int virtual_x_resolution;
extern unsigned int virtual_y_resolution;

extern int vid_mode;
/* extern unsigned int x_stretch; */
/* extern unsigned int y_stretch; */
/* extern unsigned int x_resolution; */
/* extern unsigned int y_resolution; */

int videobase = 0x200 ;
/*
  video character screen (vcs): 20 to 10 character matrix
*/
char vcs[20][10]
= {
  {
	0, 1, 2, 3, 4, 5, 6, 7, 8, 9
  },
  {
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19
  },
  {
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29
  },
  {
	20, 31, 32, 33, 34, 35, 36, 37, 38, 39
  },
  {
	20, 41, 42, 43, 44, 45, 46, 47, 48, 49
  },
  {
	20, 51, 52, 53, 54, 55, 56, 57, 58, 59
  },
  {
	20, 61, 62, 63, 64, 65, 66, 67, 68, 69
  },
  {
	20, 71, 72, 73, 74, 75, 76, 77, 78, 79
  },
  {
	20, 81, 82, 83, 84, 85, 86, 87, 88, 89
  },
  {
	20, 91, 92, 93, 94, 95, 74, 74, 94, 94
  }

};


/* Allocates video memory */

void init_video_memory(char *memory[])
{
  
  unsigned int i,j;
  for( i=0; i<MEMORY_SIZE; ++i )
    {
      memory[i] = (char*)malloc(sizeof(char)*(MEMORY_CELL_SIZE+1));
	  // init memory to zero '0'
	  for( j=0 ; j<MEMORY_CELL_SIZE ; j++)
		memory[i][j]= random()%2 ? '0' : '1';
	  memory[i][j] = 0x0; 
    }
}


void mempoke(unsigned int adr, char* bytevaluestr){
  int i;
  for(i=0; i<8; i++){
    memory[adr][i] = bytevaluestr[i];
  }
}

void draw_screen(int base, char *videomemory[]){
  unsigned int i;
  for(i=0;i<200*100;i++){
     videomemory[i]=memory[base+i];
  }
  show_memory(videomemory,le_screen);
}

/*
  main:
  options:
  --memory <memory-dump>
  Read file <memory-dump> and copy into memory
  --register <filename>
  copy content in <filename>  into corresponding register
*/
int main(int argc, char *argv[])
{
  void (*mue_code_ptr)();
  
  // memory allocation 
  init_memory();
  cpu_6502_init();

  cpu_6502_reset();
  
  // handling parameter --memory <dumpfile> 
  if(argc==3){
	if(!strcmp(argv[1], "--memory")){
	  printf("Loading %s into memory\n", argv[2]);
      read_dump(argv[2]);
    }
  }
  // handling parameter --register <dumpfile> 
  if(argc==5){
	if(!strcmp(argv[3], "--register")){
	  printf("Loading %s into register\n", argv[2]);
	  cpu_6502_register_dump(argv[6]);
    }
  }

  char (*vcsm)[10];
  vcsm=vcs;

  
  char *videomemory[200*100];
  //char *videomemory[MEMORY_SIZE];
  //char *video2memory;//[MEMORY_CELL_SIZE+1]);
  //video2memory = memory[0x0200];
  //char **videomemory = &video2memory;;//[MEMORY_CELL_SIZE+1]);
  unsigned int i;
  for(i=0;i<200*100;i++){
	videomemory[i]=memory[videobase+i];
  }

  // ??   videomemory = memory;

  
  //  unsigned int x,y;
  //  unsigned int i,j;

  //  init_video_memory(videomemory);

  le_screen = init_display();
  
  printf("drawing memory\n");

  vid_mode=0;
  
  int d ;
  //  d = getchar();

  show_memory(videomemory,le_screen);


    
  printf("after SDL_Flip\n");
  //  d = getchar();
  /*
	for(i=0; i<virtual_x_resolution; i++)
	for(j=0; j<virtual_y_resolution; j++){
	  x = adr(i,j);
	  y = bitpos(i,j);
	  memory[x][y]='0';
	}
	
  */
  

  // clear screen
  clear_screen(videomemory);
  printf("After loop\n");
  //  show_memory(memory,le_screen);

  vid_mode=1;

  char txt[20] = "helo worldhelo world";
  for(i=0;i<20;i++){
	//	vcsm[i][4]='a'-32;
	vcsm[i][4] = txt[i]-32;
	//	printf("vcsm[i][4]='a'%d",'a');//txt[i];
	draw_vcs(vcsm);
	//	SDL_Delay(1000);
	show_memory(videomemory,le_screen);
  }
  

  vid_mode=0;

  // draw horizontal line
  for(i=5; i<virtual_x_resolution-5; i++){
	poke(i,25,videomemory,1);
	//memory[adr(i, 25)][bitpos(i,i)]='1';
	show_memory(videomemory,le_screen);  

  }
  show_memory(videomemory,le_screen);  

  // draw with mempoke a vertical line
  for(i=5; i<100-5; i++){
    mempoke(videobase+i, "00100011");
  }
  show_memory(videomemory,le_screen);

  // draw vertical line
  for(i=5; i<100-5; i++){
	videomemory[adr(25, i)][bitpos(25,i)]='1';
  }
  show_memory(videomemory,le_screen);
  
  // draw diagonal line
  for(i=5; i<100-5; i++){
	//poke(i,i,memory,1);
	videomemory[adr(i, i)][bitpos(i,i)]='1';
  }
  
  show_memory(videomemory,le_screen);


  
  printf("*************************************\nNext Level:  \n\n");

  for(i=35; i<100-35; i++){
    //    memory[videobase+(i%100)+i*100] = "00000111";
    //    memory[videobase+((i+20)%100)+i*100] = "00000111";
    //poke(i,i,memory,1);
    //memory[adr(25, i)][bitpos(25,i)]='1';
  }
  draw_memory(memory+videobase);
  SDL_Flip(le_screen);
    //  draw_screen(videobase,videomemory);

  clear_screen(memory+videobase);

  for(i=0; i<90; i++){
    memory[videobase+i] = "00000111";
    //    memory[videobase+i+i*virtual_x_resolution] = "00000111";
    memory[videobase+(i%virtual_x_resolution)+(i/virtual_y_resolution)*virtual_y_resolution] = "00000001";
    //    memory[adr(i, i)][bitpos(i,i)]='1';
    //    memory[videobase+(i%200)+i*200] = "00000011";
    //    poke(i,i,videobase+memory,1);
    //memory[adr(25, i)][bitpos(25,i)]='1';
  }
  unsigned int x,y, j,index;
  for(i=12; i< 40; i++){
    for(j=12; j< 40; j++){
      memory[videobase+i+j*virtual_x_resolution] = "00001011";
    }
  }
  for(i=12; i< 10; i++){
    memory[videobase+i+30*virtual_x_resolution] = "00001101";
  }
  for(j=12; j< 100; j++){
    memory[videobase+12+ j*virtual_x_resolution] = "00000011";
  }
  for(j=2; j< 50; j++){
    memory[videobase+j+ j*virtual_x_resolution] = "00000011";
  }

  memory[videobase+i+4*virtual_x_resolution] = "00001001";
  memory[videobase+44+12*virtual_x_resolution] = "00001111";
  memory[videobase+i+4*virtual_x_resolution] = "00001001";
  
  draw_bitmap_memory(videobase); // draw_memory(memory+videobase);

  /* int color; */
  /* for(i=0; i<virtual_x_resolution*virtual_y_resolution;i++){ */
  /*   index = i + j*32; */
  /*   //    y = (unsigned int)index/virtual_x_resolution; */
  /*   //    x = index%virtual_x_resolution; */

  /*   color = conv_bitstr2int(memory[videobase+i],4,7); */
  /*   x = i%virtual_x_resolution;  */
  /*   y = (int) i/virtual_x_resolution; */

  /*   dot2(x,y,color); */

  /*   /\* 	dot2(x,y+1,color); *\/ */
  /*   /\* dot2(x+1,y+1,color); *\/ */
  /*   /\* dot2(x+1,y,color); *\/ */
  /*   /\* for(j=0; j<4; j++){ *\/ */
  /*   /\*   for(index=0; index<4; index++){ *\/ */
  /*   /\* 	dot2(x+j,y+index,color); *\/ */
  /*   /\* 	dot(x,y+1,color-1); *\/ */
  /*   /\* 	dot(x+1,y,color-3); *\/ */
  /*   /\* 	dot(x+1,y+1,color+1); *\/ */
  /*   /\* 	dot(x,y+2,color-1); *\/ */
  /*   /\* 	dot(x+1,y+2,color-1); *\/ */
  /*   /\*   } *\/ */
  /*   /\* } *\/ */
  /*   diagonale(10,20,0xd); */
  /*   /\* dot(x-1,y,color); *\/ */
  /*   /\* dot(x-1,y-1,color); *\/ */
  /*   /\* dot(x+1,y-1,color); *\/ */
  /*   /\* dot(x+2,y-1,color); *\/ */
  /*   /\* dot(x+2,y-2,color); *\/ */
  /* } */


    
  /* SDL_Flip(le_screen); */

  read_eval_exit_loop();

  /* Sdl_Delay(3000); */
  /* i=0; */
  /* while(1){ */
  /* 	// read input */
  /* 	// parse input */
  /* 	// do the stuff */
	
  /*   fetch(); */
  /*   mue_code_ptr = decode(); */
  /* 	//_fetch(); */
  /* 	//   print_tester();//	print_registers();//print_register_exec(); */
  /* 	execute(mue_code_ptr); */
  /* 	show_memory(videomemory,le_screen); */
	

  /* } */
  return 0;
}

/*

  
    int x,y;
  int i,j;
  int bitnr;
  //  struct div_t dummy;
  for(y=0; y<10;y++)
	for(x=0; x<10;x++){
	  bitnr = y*virtual_x_resolution+x;
	  //	  dummy = div(bitnr, MEMORY_CELL_SIZE);
	  printf("qwe %i\n", MEMORY_CELL_SIZE);
	  printf("x: %3i y: %3i bitnr.: %5i adr: %4i bipos: %i rem: %i\n", x, y, bitnr , bitnr%MEMORY_CELL_SIZE, div(bitnr, MEMORY_CELL_SIZE).quot , div(bitnr, MEMORY_CELL_SIZE).rem);
	}
  for(i=0; i<10;i++)
	for(j=0; j<10;j++){
	  printf("i: %3i j: %3i adr: %4i bitpos: %4i bitnbr: %4i\n", i, j, adr(i,j), bitpos(i,j).quot, j*virtual_x_resolution + i);
	}

 */




  /*
	
  DrawPixel(le_screen, x_stretch*x, y_stretch*y, 200,200,200);
  DrawPixel(le_screen, x_stretch*x+1, y_stretch*y, 200,200,200);
  DrawPixel(le_screen, x_stretch*x, y_stretch*y+1, 200,200,200);
  DrawPixel(le_screen, x_stretch*x+1, y_stretch*y+1, 200,200,200);
  */
  /*
  DrawPixel(le_screen, x, y, 200,200,200);
  DrawPixel(le_screen, x+1, y, 200,200,200);
  DrawPixel(le_screen, x, y+1, 200,200,200);
  DrawPixel(le_screen, x+1, y+1, 200,200,200);
  */
